import { ExchangeOperationType } from "@mof-ivy/ivy-node-sdk";
import { IvySDKService } from "../ivy-sdk/ivy-sdk.service";
import { IvyScriptConfigService } from "../ivy-script-config/ivy-script-config.service";
import { IActiveOperation } from "./models/active-operation.model";
export declare class IvyOperationsManagerService<OperationExtraProps = null> {
    private readonly sdk;
    private readonly config;
    private totalOps;
    private readonly operations;
    private readonly ready$;
    private readonly logger;
    constructor(sdk: IvySDKService, config: IvyScriptConfigService);
    get activeOperationsCount(): number;
    get isOverMaxConcurrencyCap(): boolean;
    cancelOpenOrder(operationId: string): boolean;
    cancelCloseOrder(operationId: string): boolean;
    hasActiveOperation(sym: string): boolean;
    getActiveOperationById(id: string): IActiveOperation<OperationExtraProps>;
    getActiveOperationBySym(sym: string): IActiveOperation<OperationExtraProps>;
    operationIsPendingOpen(sym: string): boolean;
    operationIsPendingClose(sym: string): boolean;
    closeOperation(sym: string, orderType: "Market" | "Limit", reason: string): Promise<void>;
    openOperation(sym: string, opType: ExchangeOperationType, orderType: "Market" | "Limit", extraProps?: OperationExtraProps, reason?: string): Promise<void>;
    private onActiveStatsUpdate;
    private onOpenedOperationConfirm;
    private onClosedOperationConfirm;
    private onCloseOperationError;
    private onOpenOperationError;
    private setupStreamsOrBlock;
}
